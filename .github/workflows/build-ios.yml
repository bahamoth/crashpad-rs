name: Build iOS

on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: ios-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios:
    if: github.actor != 'release-please[bot]'
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 'stable'
      - uses: Swatinem/rust-cache@v2
      - name: Install dependencies
        run: |
          cargo xtask install-tools
      - name: Add iOS targets
        run: |
          rustup target add aarch64-apple-ios
          rustup target add aarch64-apple-ios-sim
          rustup target add x86_64-apple-ios
      - name: iOS Build (aarch64)
        run: |
          cargo build -p crashpad-rs-sys --target aarch64-apple-ios
          cargo build -p crashpad-rs --target aarch64-apple-ios
      
      # iOS Simulator tests
      - name: Build for iOS Simulator
        run: |
          cargo build -p crashpad-rs-sys --target aarch64-apple-ios-sim
          cargo build -p crashpad-rs --target aarch64-apple-ios-sim
          cargo build --example ios_simulator_test --target aarch64-apple-ios-sim --release
      
      - name: Setup iOS Simulator
        run: |
          # List available simulators
          xcrun simctl list devices
          
          # Create a new simulator if needed
          SIMULATOR_NAME="CrashpadTestSim"
          DEVICE_TYPE="iPhone 15"
          RUNTIME="com.apple.CoreSimulator.SimRuntime.iOS-17-5"
          
          # Check if simulator exists, create if not
          if ! xcrun simctl list devices | grep -q "$SIMULATOR_NAME"; then
            xcrun simctl create "$SIMULATOR_NAME" "$DEVICE_TYPE" "$RUNTIME" || \
            xcrun simctl create "$SIMULATOR_NAME" "com.apple.CoreSimulator.SimDeviceType.iPhone-15" "com.apple.CoreSimulator.SimRuntime.iOS-17-5" || \
            echo "Using existing simulator"
          fi
          
          # Get the simulator UDID
          SIMULATOR_ID=$(xcrun simctl list devices | grep "$SIMULATOR_NAME" | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' | head -1)
          
          if [ -z "$SIMULATOR_ID" ]; then
            # Fallback: use any available iPhone simulator
            SIMULATOR_ID=$(xcrun simctl list devices | grep "iPhone" | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' | head -1)
          fi
          
          echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
          
          # Boot the simulator
          xcrun simctl boot "$SIMULATOR_ID" || true
          
          # Wait for simulator to be ready
          xcrun simctl bootstatus "$SIMULATOR_ID" -b
      
      - name: Run iOS Simulator Tests
        run: |
          # Test 1: Normal initialization
          echo "=== Test 1: Initialization test ==="
          xcrun simctl spawn "$SIMULATOR_ID" \
            ./target/aarch64-apple-ios-sim/release/examples/ios_simulator_test
          
          # Test 2: Crash test (expected to crash)
          echo "=== Test 2: Crash test ==="
          xcrun simctl spawn "$SIMULATOR_ID" \
            ./target/aarch64-apple-ios-sim/release/examples/ios_simulator_test crash || true
          
          # Wait for crash processing
          sleep 3
          
          # Test 3: Check for crash dumps
          echo "=== Test 3: Checking for crash dumps ==="
          
          # Get the simulator data directory
          SIM_DATA_DIR=$(xcrun simctl get_app_container "$SIMULATOR_ID" data)
          
          # Check if crash dumps exist (iOS stores them in specific locations)
          # Note: Actual crash dump location may vary, this checks common locations
          xcrun simctl spawn "$SIMULATOR_ID" ls -la /tmp/ | grep crashpad || echo "No dumps in /tmp"
          xcrun simctl spawn "$SIMULATOR_ID" ls -la ~/Library/Logs/CrashReporter/ || echo "No dumps in CrashReporter"
          
          # For in-process handler, dumps might be in the app's documents directory
          echo "âœ“ iOS Simulator tests completed"
      
      - name: Shutdown Simulator
        if: always()
        run: |
          xcrun simctl shutdown "$SIMULATOR_ID" || true

