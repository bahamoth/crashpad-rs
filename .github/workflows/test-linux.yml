name: Build Linux

on:
  pull_request:

permissions:
  pull-requests: write

concurrency:
  group: linux-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linux:
    if: github.actor != 'release-please[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 'stable'
      - uses: Swatinem/rust-cache@v2
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential zlib1g-dev libcurl4-openssl-dev clang pkg-config
      - name: Install dependencies
        run: |
          cargo xtask install-tools
      - name: linux Build
        run: |
          cargo build --package crashpad-rs-sys
          cargo build --package crashpad-rs
      - name: test
        run: |
          # Run tests with both JUnit and JSON output
          cargo nextest run --profile ci
          
          # Generate JSON output for parsing
          NEXTEST_EXPERIMENTAL_LIBTEST_JSON=1 cargo nextest run --message-format libtest-json 2>/dev/null > test-output.json
          
          # Parse JSON using shared script
          bash .github/scripts/parse-nextest-json.sh "Linux" "x86_64" "test-output.json"

      - name: Upload Test Results (JUnit)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-linux-junit
          path: target/nextest/ci/junit.xml
          retention-days: 7
      
      - name: Upload Test Results (Text)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-linux
          path: test-results.txt
          retention-days: 7

      - name: Post PR Comment
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read test results
            let testCount = 0, testPassed = 0, testFailed = 0, testSkipped = 0;
            let duration = '0s';
            let slowestTests = [];
            let failedTests = [];
            
            if (fs.existsSync('test-results.txt')) {
              const content = fs.readFileSync('test-results.txt', 'utf8');
              const lines = content.split('\n').filter(l => l.trim());
              
              const data = {};
              let currentSection = null;
              
              lines.forEach(line => {
                if (line.includes(':')) {
                  const [key, ...valueParts] = line.split(':');
                  const value = valueParts.join(':').trim();
                  
                  if (key.trim() === 'slowest_tests' || key.trim() === 'failed_tests') {
                    currentSection = key.trim();
                  } else if (line.startsWith('  - ') && currentSection) {
                    if (currentSection === 'slowest_tests') {
                      slowestTests.push(line.substring(4));
                    } else if (currentSection === 'failed_tests') {
                      failedTests.push(line.substring(4));
                    }
                  } else {
                    data[key.trim()] = value;
                    currentSection = null;
                  }
                }
              });
              
              testCount = parseInt(data.test_count || '0');
              testPassed = parseInt(data.test_passed || '0');
              testFailed = parseInt(data.test_failed || '0');
              testSkipped = parseInt(data.test_skipped || '0');
              duration = data.total_duration || '0s';
            }
            
            // Build comment body
            const status = testFailed === 0 ? '‚úÖ' : '‚ùå';
            const statusText = testFailed === 0 ? 'Passed' : 'Failed';
            
            let body = `## üêß Linux Test Results\n\n`;
            body += `**Status:** ${status} ${statusText}\n`;
            body += `**Tests:** ${testCount} total, ${testPassed} passed, ${testFailed} failed, ${testSkipped} skipped\n`;
            body += `**Duration:** ${duration}\n\n`;
            
            // Show failed tests if any
            if (failedTests.length > 0) {
              body += `### ‚ùå Failed Tests\n`;
              failedTests.forEach(test => {
                body += `- ${test}\n`;
              });
              body += `\n`;
            }
            
            // Show slowest tests
            if (slowestTests.length > 0) {
              body += `<details><summary>‚è±Ô∏è Slowest Tests</summary>\n\n`;
              slowestTests.forEach(test => {
                body += `- ${test}\n`;
              });
              body += `\n</details>\n\n`;
            }
            
            body += `---\n`;
            body += `üîó [View Full Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            
            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üêß Linux Test Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Generate Test Summary
        if: always()
        run: |
          echo "## üêß Linux Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if JUnit file exists and parse it
          if [ -f "target/nextest/ci/junit.xml" ]; then
            # Simple parsing of JUnit XML for summary
            TESTS=$(grep -c '<testcase' target/nextest/ci/junit.xml || echo "0")
            FAILURES=$(grep -c '<failure' target/nextest/ci/junit.xml || echo "0")
            ERRORS=$(grep -c '<error' target/nextest/ci/junit.xml || echo "0")
            PASSED=$((TESTS - FAILURES - ERRORS))
          
            echo "### Test Results" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Tests | $TESTS |" >> $GITHUB_STEP_SUMMARY
            echo "| Passed | ‚úÖ $PASSED |" >> $GITHUB_STEP_SUMMARY
            echo "| Failed | ‚ùå $FAILURES |" >> $GITHUB_STEP_SUMMARY
            echo "| Errors | ‚ö†Ô∏è $ERRORS |" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Test Results" >> $GITHUB_STEP_SUMMARY
            echo "No test results file found (JUnit XML)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: Linux (Ubuntu)" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture**: x86_64" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Runner**: cargo-nextest" >> $GITHUB_STEP_SUMMARY
          echo "- **Output Format**: JUnit XML" >> $GITHUB_STEP_SUMMARY

