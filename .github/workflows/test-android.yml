name: Build Android

on:
  pull_request:

concurrency:
  group: android-${{ github.ref }}
  cancel-in-progress: true

jobs:
  android:
    if: github.actor != 'release-please[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 'stable'
          targets: aarch64-linux-android
      - uses: Swatinem/rust-cache@v2
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
      - name: Install NDK
        uses: nttld/setup-ndk@v1
        id: ndk
        with:
          ndk-version: r27c
      - name: Install cargo-ndk
        run: cargo install cargo-ndk
      - name: Create NDK symlinks (workaround for mini_chromium issue)
        run: |
          cd ${{ steps.ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin
          # For ARM64 (arm64-v8a)
          ln -sf aarch64-linux-android21-clang aarch64-linux-android-clang
          ln -sf aarch64-linux-android21-clang++ aarch64-linux-android-clang++
          ln -sf llvm-ar aarch64-linux-android-ar
      - name: Install dependencies
        run: |
          cargo xtask install-tools
      - name: Android build (arm64-v8a)
        env:
          ANDROID_NDK_HOME: ${{ steps.ndk.outputs.ndk-path }}
        run: |
          cargo ndk -t arm64-v8a build --package crashpad-rs-sys
          cargo ndk -t arm64-v8a build --package crashpad-rs
      
      # Build test CLI for emulator testing
      - name: Build test CLI
        env:
          ANDROID_NDK_HOME: ${{ steps.ndk.outputs.ndk-path }}
        run: |
          cargo ndk -t arm64-v8a build --example crashpad_test_cli --release

  # Android emulator test (runs on macOS for better performance)
  android-emulator-test:
    if: github.actor != 'release-please[bot]'
    runs-on: ubuntu-latest  # Use Ubuntu for more stable emulator support
    strategy:
      matrix:
        api-level: [ 29 ]  # Android 10
        arch: [ x86_64 ]  # x86_64 works better on Linux CI
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-linux-android

      - name: Install cargo-ndk
        run: cargo install cargo-ndk

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android NDK
        run: |
          # List available NDK versions
          sdkmanager --list | grep ndk
          # Install latest stable NDK
          sdkmanager --install "ndk;26.1.10909125"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/26.1.10909125" >> $GITHUB_ENV

      - name: Setup NDK symlinks
        run: |
          NDK_HOME=$ANDROID_NDK_HOME
          TOOLCHAIN=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin
          
          # Create symlinks for x86_64 target
          ln -sf $TOOLCHAIN/x86_64-linux-android30-clang $TOOLCHAIN/x86_64-linux-android-clang
          ln -sf $TOOLCHAIN/x86_64-linux-android30-clang++ $TOOLCHAIN/x86_64-linux-android-clang++
          ln -sf $TOOLCHAIN/llvm-ar $TOOLCHAIN/x86_64-linux-android-ar
          ln -sf $TOOLCHAIN/llvm-ranlib $TOOLCHAIN/x86_64-linux-android-ranlib

      - name: Install dependencies
        run: cargo xtask install-tools

      - name: Build for Android x86_64
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          cargo ndk -t x86_64 build --package crashpad-rs-sys --release
          cargo ndk -t x86_64 build --package crashpad-rs --release
          cargo ndk -t x86_64 build --example crashpad_test_cli --release

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.arch }}
      
      # Enable KVM for better performance
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Create AVD and generate snapshot
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          target: default
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot
          disable-animations: true
          disable-spellchecker: true
          script: echo "Generated AVD snapshot for caching."

      - name: Create test script
        run: |
          cat > run_android_tests.sh << 'SCRIPT_EOF'
          #!/bin/bash
          set -e
          
          # Wait for device
          adb wait-for-device
          adb shell getprop sys.boot_completed | grep 1
          
          # Setup directories
          adb shell mkdir -p /data/local/tmp/crashpad_database
          adb shell mkdir -p /data/local/tmp/crashpad_metrics
          
          # Push binaries
          adb push target/x86_64-linux-android/release/examples/crashpad_test_cli /data/local/tmp/
          adb push target/x86_64-linux-android/release/libcrashpad_handler.so /data/local/tmp/
          
          # Find and push libc++_shared.so
          LIBCXX=$(find $ANDROID_NDK_HOME -path "*/x86_64-linux-android/libc++_shared.so" | head -1)
          if [ -n "$LIBCXX" ]; then
            adb push "$LIBCXX" /data/local/tmp/
          else
            echo "ERROR: Cannot find libc++_shared.so"
            exit 1
          fi
          
          # Make executables
          adb shell chmod +x /data/local/tmp/crashpad_test_cli
          adb shell chmod +x /data/local/tmp/libcrashpad_handler.so
          
          # Test 1: Basic initialization
          echo "=== Test 1: Basic initialization ==="
          INIT_OUTPUT=$(adb shell "cd /data/local/tmp && LD_LIBRARY_PATH=/data/local/tmp ./crashpad_test_cli 2>&1")
          echo "$INIT_OUTPUT"
          if echo "$INIT_OUTPUT" | grep -q "✓ Handler started successfully"; then
            echo "✅ PASS: Handler initialized successfully"
            echo "test1_result=PASS" >> test_results.env
          else
            echo "❌ FAIL: Handler initialization failed"
            echo "test1_result=FAIL" >> test_results.env
            exit 1
          fi
          
          # Test 2: Crash handling
          echo ""
          echo "=== Test 2: Crash handling ==="
          CRASH_OUTPUT=$(adb shell "cd /data/local/tmp && LD_LIBRARY_PATH=/data/local/tmp ./crashpad_test_cli crash 2>&1" || true)
          echo "$CRASH_OUTPUT"
          if echo "$CRASH_OUTPUT" | grep -q "Triggering crash now"; then
            echo "✅ PASS: Crash triggered as expected"
            echo "test2_result=PASS" >> test_results.env
          else
            echo "❌ FAIL: Crash trigger failed"
            echo "test2_result=FAIL" >> test_results.env
          fi
          
          # Test 3: Verify crash dump generation
          sleep 2
          echo ""
          echo "=== Test 3: Checking for crash dumps ==="
          adb shell ls -la /data/local/tmp/crashpad_database/ || true
          DUMP_COUNT=$(adb shell "find /data/local/tmp/crashpad_database -name '*.dmp' 2>/dev/null | wc -l" | tr -d '\r\n')
          echo "Found $DUMP_COUNT crash dump file(s)"
          if [ "$DUMP_COUNT" -gt "0" ]; then
            echo "✅ PASS: Crash dump generated successfully"
            echo "test3_result=PASS" >> test_results.env
          else
            echo "❌ FAIL: No crash dumps found"
            echo "test3_result=FAIL" >> test_results.env
          fi
          
          # Summary
          echo ""
          echo "=== Test Summary ==="
          source test_results.env 2>/dev/null || true
          echo "Test 1 (Initialization): ${test1_result:-UNKNOWN}"
          echo "Test 2 (Crash Trigger): ${test2_result:-UNKNOWN}"
          echo "Test 3 (Dump Generation): ${test3_result:-UNKNOWN}"
          
          # Exit with failure if any test failed
          if [ "${test1_result}" = "FAIL" ] || [ "${test3_result}" = "FAIL" ]; then
            exit 1
          fi
          
          # Signal completion - let the action handle cleanup
          echo ""
          echo "=== Tests completed successfully ==="
          SCRIPT_EOF
          chmod +x run_android_tests.sh

      - name: Run tests on Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          target: default
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot
          disable-animations: true
          disable-spellchecker: true
          script: ./run_android_tests.sh

      - name: Save Test Results
        if: always()
        run: |
          # Load test results from previous step
          if [ -f test_results.env ]; then
            source test_results.env
          fi
          
          cat > test-results.txt <<EOF
          platform: Android
          arch: ${{ matrix.arch }}
          api_level: ${{ matrix.api-level }}
          test_initialization: ${test1_result:-UNKNOWN}
          test_crash_trigger: ${test2_result:-UNKNOWN}
          test_dump_generation: ${test3_result:-UNKNOWN}
          timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF
          
          echo "Test results saved to test-results.txt"
          cat test-results.txt

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-android-${{ matrix.arch }}-api${{ matrix.api-level }}
          path: test-results.txt
          retention-days: 7

      - name: Generate Test Summary
        if: always()
        run: |
          echo "## 📱 Android Emulator Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Test Execution Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Case | Description | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Load test results from previous step
          if [ -f test_results.env ]; then
            source test_results.env
          fi
          
          # Display actual test results
          test1_status="${test1_result:-UNKNOWN}"
          test2_status="${test2_result:-UNKNOWN}"
          test3_status="${test3_result:-UNKNOWN}"
          
          # Format status with emojis
          format_status() {
            case "$1" in
              PASS) echo "✅ PASS" ;;
              FAIL) echo "❌ FAIL" ;;
              *) echo "❓ UNKNOWN" ;;
            esac
          }
          
          echo "| Test 1 | Handler Initialization | $(format_status $test1_status) |" >> $GITHUB_STEP_SUMMARY
          echo "| Test 2 | Crash Trigger | $(format_status $test2_status) |" >> $GITHUB_STEP_SUMMARY
          echo "| Test 3 | Dump Generation | $(format_status $test3_status) |" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [ "$test1_status" = "PASS" ] && [ "$test2_status" = "PASS" ] && [ "$test3_status" = "PASS" ]; then
            OVERALL_STATUS="✅ All tests passed"
          elif [ "$test1_status" = "FAIL" ] || [ "$test3_status" = "FAIL" ]; then
            OVERALL_STATUS="❌ Critical tests failed"
          else
            OVERALL_STATUS="⚠️ Some tests had issues"
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Overall Status: $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Target | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| crashpad-rs-sys | x86_64-linux-android | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "| crashpad-rs | x86_64-linux-android | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "| crashpad_test_cli | x86_64-linux-android | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Test Environment" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Runner OS | ${{ runner.os }} |" >> $GITHUB_STEP_SUMMARY
          echo "| NDK Version | 26.1.10909125 |" >> $GITHUB_STEP_SUMMARY
          echo "| Android API Level | ${{ matrix.api-level }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture | ${{ matrix.arch }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Emulator Type | ${{ matrix.arch }} system image |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Test Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Crash dumps location: `/data/local/tmp/crashpad_database/`" >> $GITHUB_STEP_SUMMARY
          echo "- Metrics location: `/data/local/tmp/crashpad_metrics/`" >> $GITHUB_STEP_SUMMARY

