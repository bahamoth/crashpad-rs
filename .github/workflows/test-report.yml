name: Test Report

on:
  workflow_run:
    workflows: ["Build Android", "Build iOS", "Build macOS", "Build Linux"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  report:
    if: github.event.workflow_run.event == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Download workflow artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            console.log('Found artifacts:', artifacts.data.total_count);
      
      - name: Generate PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const workflow = context.payload.workflow_run;
            const pr = workflow.pull_requests[0];
            
            if (!pr) {
              console.log('No PR associated with this workflow run');
              return;
            }
            
            const emoji = workflow.conclusion === 'success' ? '✅' : '❌';
            const status = workflow.conclusion === 'success' ? 'Passed' : 'Failed';
            
            let body = `## 📊 Test Results for ${workflow.name}\n\n`;
            body += `| Workflow | Status | Duration | Run |\n`;
            body += `|----------|--------|----------|-----|\n`;
            body += `| ${workflow.name} | ${emoji} ${status} | ${Math.round((new Date(workflow.updated_at) - new Date(workflow.created_at)) / 1000)}s | [#${workflow.run_number}](${workflow.html_url}) |\n`;
            body += `\n`;
            
            // Platform-specific results
            if (workflow.name === 'Build Android') {
              body += `### 🤖 Android Tests\n`;
              body += `- Build: ${emoji}\n`;
              body += `- Emulator Tests: ${emoji}\n`;
              body += `- Architecture: ARM64 & x86_64\n`;
            } else if (workflow.name === 'Build iOS') {
              body += `### 🍎 iOS Tests\n`;
              body += `- Build: ${emoji}\n`;
              body += `- Simulator Tests: ${emoji}\n`;
              body += `- In-Process Handler: ${emoji}\n`;
            } else if (workflow.name === 'Build macOS') {
              body += `### 🖥️ macOS Tests\n`;
              body += `- Build: ${emoji}\n`;
              body += `- Unit Tests: ${emoji}\n`;
            } else if (workflow.name === 'Build Linux') {
              body += `### 🐧 Linux Tests\n`;
              body += `- Build: ${emoji}\n`;
              body += `- Unit Tests: ${emoji}\n`;
            }
            
            body += `\n---\n`;
            body += `*Updated at ${new Date().toISOString()}*\n`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Test Results for')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: body
              });
            }