name: Build iOS

on:
  pull_request:

concurrency:
  group: ios-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios:
    if: github.actor != 'release-please[bot]'
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 'stable'
      - uses: Swatinem/rust-cache@v2
      - name: Install dependencies
        run: |
          cargo xtask install-tools
      - name: Add iOS targets
        run: |
          rustup target add aarch64-apple-ios
          rustup target add aarch64-apple-ios-sim
          rustup target add x86_64-apple-ios
      - name: iOS Build (aarch64)
        run: |
          cargo build -p crashpad-rs-sys --target aarch64-apple-ios
          cargo build -p crashpad-rs --target aarch64-apple-ios
      
      # iOS Simulator tests
      - name: Build for iOS Simulator
        run: |
          cargo build -p crashpad-rs-sys --target aarch64-apple-ios-sim
          cargo build -p crashpad-rs --target aarch64-apple-ios-sim
          cargo build --example ios_simulator_test --target aarch64-apple-ios-sim --release

      - name: Setup iOS Simulator
        run: |
          # List available runtimes and devices for debugging
          echo "Available iOS runtimes:"
          xcrun simctl list runtimes
          echo "Available devices:"
          xcrun simctl list devices available
          
          # Use the first available iPhone simulator
          SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone" | head -1 | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}')
          
          if [ -z "$SIMULATOR_ID" ]; then
            echo "No iPhone simulator found, creating one..."
            # Try to create with available runtime
            RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | grep -oE 'com.apple.CoreSimulator.SimRuntime.iOS-[0-9-]+')
            xcrun simctl create "TestiPhone" "iPhone 14" "$RUNTIME" || \
            xcrun simctl create "TestiPhone" "com.apple.CoreSimulator.SimDeviceType.iPhone-14" "$RUNTIME"
            SIMULATOR_ID=$(xcrun simctl list devices | grep "TestiPhone" | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}')
          fi
          
          echo "Using simulator: $SIMULATOR_ID"
          echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
          
          # Boot the simulator
          xcrun simctl boot "$SIMULATOR_ID" || echo "Simulator already booted"
          
          # Wait for boot to complete
          xcrun simctl bootstatus "$SIMULATOR_ID" -b || echo "Boot status check failed, continuing..."

      - name: Run iOS Simulator Tests
        run: |
          # Copy test binary to simulator
          TEST_BIN="./target/aarch64-apple-ios-sim/release/examples/ios_simulator_test"
          
          # Test 1: Normal initialization
          echo "=== Test 1: Initialization test ==="
          INIT_OUTPUT=$(xcrun simctl spawn "$SIMULATOR_ID" "$TEST_BIN" 2>&1 || {
            echo "Direct spawn failed, trying with upload..."
            # Upload the binary to simulator's tmp directory
            xcrun simctl upload "$SIMULATOR_ID" "$TEST_BIN" /tmp/ios_simulator_test
            xcrun simctl spawn "$SIMULATOR_ID" /tmp/ios_simulator_test 2>&1
          })
          echo "$INIT_OUTPUT"
          
          if echo "$INIT_OUTPUT" | grep -q "Handler started successfully\|initialized successfully"; then
            echo "✅ PASS: Handler initialized successfully"
            TEST1_RESULT="PASS"
          else
            echo "❌ FAIL: Handler initialization failed"
            TEST1_RESULT="FAIL"
            exit 1
          fi
          
          # Test 2: Crash test (expected to crash)
          echo -e "\n=== Test 2: Crash test ==="
          CRASH_OUTPUT=$(xcrun simctl spawn "$SIMULATOR_ID" "$TEST_BIN" crash 2>&1 || true)
          echo "$CRASH_OUTPUT"
          
          if echo "$CRASH_OUTPUT" | grep -q "Triggering crash now"; then
            echo "✅ PASS: Crash triggered as expected"
            TEST2_RESULT="PASS"
          else
            echo "❌ FAIL: Crash trigger failed"
            TEST2_RESULT="FAIL"
          fi
          
          # Give time for crash processing
          sleep 2
          
          # Test 3: TAP mode test
          echo -e "\n=== Test 3: TAP mode test ==="
          TAP_OUTPUT=$(xcrun simctl spawn "$SIMULATOR_ID" "$TEST_BIN" test 2>&1 || true)
          echo "$TAP_OUTPUT"
          
          if echo "$TAP_OUTPUT" | grep -q "# All tests passed"; then
            echo "✅ PASS: TAP tests passed"
            TEST3_RESULT="PASS"
          else
            echo "❌ FAIL: TAP tests failed"
            TEST3_RESULT="FAIL"
          fi
          
          # Summary
          echo -e "\n=== Test Summary ==="
          echo "Test 1 (Initialization): $TEST1_RESULT"
          echo "Test 2 (Crash Trigger): $TEST2_RESULT"
          echo "Test 3 (TAP Mode): $TEST3_RESULT"
          
          # Note: iOS in-process handler stores dumps differently than desktop platforms
          # Dumps are typically processed on next app launch
          
          # Exit with failure if any test failed
          if [ "$TEST1_RESULT" = "FAIL" ] || [ "$TEST3_RESULT" = "FAIL" ]; then
            exit 1
          fi

      - name: Save Test Results
        if: always()
        run: |
          # Calculate total test count and passed/failed
          TOTAL_TESTS=3
          PASSED_TESTS=0
          FAILED_TESTS=0
          
          [ "$TEST1_RESULT" = "PASS" ] && PASSED_TESTS=$((PASSED_TESTS + 1)) || FAILED_TESTS=$((FAILED_TESTS + 1))
          [ "$TEST2_RESULT" = "PASS" ] && PASSED_TESTS=$((PASSED_TESTS + 1)) || FAILED_TESTS=$((FAILED_TESTS + 1))
          [ "$TEST3_RESULT" = "PASS" ] && PASSED_TESTS=$((PASSED_TESTS + 1)) || FAILED_TESTS=$((FAILED_TESTS + 1))
          
          cat > test-results.txt <<EOF
          platform: iOS
          arch: ${{ matrix.arch || 'aarch64' }}
          simulator: iPhone
          test_count: $TOTAL_TESTS
          test_passed: $PASSED_TESTS
          test_failed: $FAILED_TESTS
          test_skipped: 0
          
          test_details:
            - test_initialization: ${TEST1_RESULT:-UNKNOWN}
            - test_crash_trigger: ${TEST2_RESULT:-UNKNOWN}
            - test_tap_mode: ${TEST3_RESULT:-UNKNOWN}
          
          timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF
          
          echo "Test results saved to test-results.txt"
          cat test-results.txt

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ios-simulator
          path: test-results.txt
          retention-days: 7

      - name: Shutdown Simulator
        if: always()
        run: |
          xcrun simctl shutdown "$SIMULATOR_ID" || true

      - name: Generate Test Summary
        if: always()
        run: |
          echo "## 📱 iOS Simulator Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Test Execution Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Case | Description | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Parse test results based on job status
          if [ "${{ job.status }}" == "success" ]; then
            echo "| Test 1 | Handler Initialization | ✅ PASS |" >> $GITHUB_STEP_SUMMARY
            echo "| Test 2 | Crash Trigger | ✅ PASS |" >> $GITHUB_STEP_SUMMARY
            echo "| Test 3 | TAP Mode Tests | ✅ PASS |" >> $GITHUB_STEP_SUMMARY
            OVERALL_STATUS="✅ All tests passed"
          else
            echo "| Test 1 | Handler Initialization | ❓ Check logs |" >> $GITHUB_STEP_SUMMARY
            echo "| Test 2 | Crash Trigger | ❓ Check logs |" >> $GITHUB_STEP_SUMMARY
            echo "| Test 3 | TAP Mode Tests | ❓ Check logs |" >> $GITHUB_STEP_SUMMARY
            OVERALL_STATUS="❌ Some tests failed"
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Overall Status: $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Target | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| crashpad-rs-sys | aarch64-apple-ios | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "| crashpad-rs | aarch64-apple-ios | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "| crashpad-rs-sys | aarch64-apple-ios-sim | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "| crashpad-rs | aarch64-apple-ios-sim | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "| ios_simulator_test | aarch64-apple-ios-sim | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Test Environment" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Runner OS | ${{ runner.os }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Xcode Version | Latest |" >> $GITHUB_STEP_SUMMARY
          echo "| Simulator Device | iPhone |" >> $GITHUB_STEP_SUMMARY
          echo "| iOS Runtime | Available |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Notes" >> $GITHUB_STEP_SUMMARY
          echo "- iOS uses in-process handler (different from desktop platforms)" >> $GITHUB_STEP_SUMMARY
          echo "- Crash dumps are processed on next app launch" >> $GITHUB_STEP_SUMMARY
          echo "- TAP mode provides automated test verification" >> $GITHUB_STEP_SUMMARY

